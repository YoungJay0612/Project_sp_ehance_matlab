%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.4 and Fixed-Point Designer 6.1           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [e]=   nlms_fixpt(d, u, Pest_1,A_st_1, N ) 

     fm = get_fimath();
     A_st = fi(A_st_1, 1, 16, 20, fm);
     Pest = fi(Pest_1, 0, 16, 9, fm);

     Nflt = fi(256, 0, 9, 0, fm); omega = fi(0.898, 0, 16, 16, fm);  alpha = fi(0.072, 0, 16, 19, fm);
      e = fi(zeros(fi_toint(N),1), 1, 16, 13, fm);
     
     for k = fi(1, 0, 1, 0, fm): N

     Y_Frame_Block = fi(u(k:Nflt+k-fi(1, 0, 1, 0, fm)), 1, 3, 0, fm);      
     Y_Frame_up = fi(d(k), 1, 3, 0, fm);   
     yB =  fi(Y_Frame_Block' * Y_Frame_Block, 0, 7, 0, fm);  
    %% apply the coeff             
     Y_Down = fi(A_st'*Y_Frame_Block, 1, 16, 17, fm);        
     yout = fi(Y_Frame_up - Y_Down, 1, 16, 13, fm) ;        
     e(k) = fi(yout, 1, 16, 13, fm);  
    %% update the coeff  

     Pest = fi(omega * Pest + (fi_signed(fi(1, 0, 1, 0, fm))-omega) * yB, 0, 16, 9, fm);          
     mu = fi(fi_dotdiv(alpha, ( Pest + fi(1e-2, 0, 16, 22, fm))), 0, 16, 22, fm);     
     A_st = fi(A_st +  mu*yout.* (Y_Frame_Block), 1, 16, 20, fm) ;  
     
     end
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_dotdiv(a,b)
    coder.inline( 'always' );
    if isfi( a ) && isfi( b )
        a1 = fi( a, 'RoundMode', 'fix' );
        b1 = fi( b, 'RoundMode', 'fix' );
        c1 = divide( divideType( a1, b1 ), a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = a ./ b;
    end
end


function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
